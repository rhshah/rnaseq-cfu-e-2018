[
["_main.html", "“Clustering and differential analysis of CFU-E cells with different conditions” 0.1 Table of Contents 0.2 Summary of Experiment: 0.3 Exploring data with DESeq2", " “Clustering and differential analysis of CFU-E cells with different conditions” Ronak Shah July 27th 2017 0.1 Table of Contents Summary of Experiment: Exploring data with DESeq2 Running DESeq2 Make counts table to explore that data Histograms of counts per gene matrix truncated matrix box-plotdensity-plots scatter-plots Eliminate undetected genes Re-run DESeq2 &amp; Normalization Plot normalized data Count variance is related to mean Estimated Dispersion for each gene PCA amd heatmap on all samples using reguralized log transformation PCA using rlog Heatmap of count matrix for first 50 genes Heatmap of sample distance based on rlog Perform differential expression call Set standard cutoff and Enhanced Volcano Plots Untreated (WT) vs EPO with Vehicle (EV) Untreated (WT) vs EPO with HMGB1 (EH) Untreated (WT) vs HMGB1 (H) EPO with Vehicle (EV) vs EPO with HMGB1 (EH) EPO with Vehicle (EV) vs HMGB1 (H) EPO with HMGB1 (EH) vs HMGB1 (H) # Load libraries set.seed(0) source(&quot;https://bioconductor.org/biocLite.R&quot;) library(&quot;DESeq2&quot;) library(&quot;RColorBrewer&quot;) library(&quot;vsn&quot;) library(&quot;pheatmap&quot;) library(&quot;EnhancedVolcano&quot;) library(&quot;gridExtra&quot;) library(&quot;grid&quot;) library(&quot;ggplot2&quot;) library(&quot;gplots&quot;) library(&quot;affy&quot;) library(&quot;reshape2&quot;) library(&quot;gProfileR&quot;) library(&quot;ComplexHeatmap&quot;) 0.2 Summary of Experiment: Flow-sorted Colony-Forming Units of Erythroid (CFU-E) cells. The cells are then starved for six hours to stop the Erythropoietin (EPO). Then these cells are treated with: EPO + Vehicle (Peripheral Blood Smear (PBS)) EPO + High mobility group box 1 (HMGB1) protein HMGB1 The treatment occurs for sixty minutes and then RNA was extracted. Three biological replicates are used for reproducibility. Single-end stranded RNA-seq performed on wild-type EPO starved cells and treated with 1,2,3 as stated above. Labels: WT =&gt; Untreated EV =&gt; EPO + Vehicle EH =&gt; EPO + HMGB1 H =&gt; HMGB1 E1 =&gt; Samples from Patient 1 E2 =&gt; Samples from Patient 2 E3 =&gt; Samples from Patient 3 0.3 Exploring data with DESeq2 directory &lt;- &quot;/Users/rshah22/Documents/Projects/RNAseq_Erythrocid/counts_analysis/&quot; files &lt;- read.table(paste(directory, &quot;deseq2_sampleinfo.txt&quot;, sep = &quot;&quot;), header = T) condition &lt;- read.csv(paste(directory, &quot;deseq2_phenotype.txt&quot;, sep = &quot;&quot;), header = T) sampleTable &lt;- data.frame(sampleName = files$sampleName, fileName = files$fileName, condition.type = condition$condition, condition.treatment = condition$treatment, condition.experiment = condition$experiment) ddsHTSeq &lt;- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable, directory = directory, design = ~condition.type + condition.experiment) # ddsHTSeq ddsHTSeq$condition.type &lt;- factor(ddsHTSeq$condition.type, levels = c(&quot;WT&quot;, &quot;EV&quot;, &quot;EH&quot;, &quot;H&quot;)) ddsHTSeq$condition.experiment &lt;- factor(ddsHTSeq$condition.experiment, levels = c(&quot;E1&quot;, &quot;E2&quot;, &quot;E3&quot;)) 0.3.1 Running DESeq2 dds &lt;- DESeq(ddsHTSeq) 0.3.2 Make counts table to explore that data count.table &lt;- counts(dds) count.table &lt;- count.table[-c((grep(&quot;^HIST|RNA|^RP11&quot;, rownames(count.table)))), ] stats.per.sample &lt;- data.frame(t(do.call(cbind, lapply(count.table, summary)))) stats.per.sample$libsum &lt;- apply(count.table, 2, sum) ## libsum stats.per.sample$perc05 &lt;- apply(count.table, 2, quantile, 0.05) stats.per.sample$perc10 &lt;- apply(count.table, 2, quantile, 0.1) stats.per.sample$perc90 &lt;- apply(count.table, 2, quantile, 0.9) stats.per.sample$perc95 &lt;- apply(count.table, 2, quantile, 0.95) stats.per.sample$zeros &lt;- apply(count.table == 0, 2, sum) stats.per.sample$percent.zeros &lt;- 100 * stats.per.sample$zeros/nrow(count.table) kable(stats.per.sample[sample(1:ncol(count.table), size = 10), ], caption = &quot;**Table: statistics per sample. ** We only display a random selection of 10 samples. &quot;) (#tab:code block 4)Table: statistics per sample. We only display a random selection of 10 samples. Min. X1st.Qu. Median Mean X3rd.Qu. Max. libsum perc05 perc10 perc90 perc95 zeros percent.zeros 11 0 0 0 0 0 0 16025018 0 0 864.0 1727.2 24354 54.92929 3 5 5 5 5 5 5 15796424 0 0 800.4 1621.0 24715 55.74351 4 0 0 0 0 0 0 15273891 0 0 774.0 1569.2 24872 56.09762 6 11 11 11 11 11 11 13073035 0 0 645.0 1292.0 24544 55.35783 8 0 0 0 0 0 0 16006088 0 0 804.0 1620.0 24365 54.95410 2 3 3 3 3 3 3 15509458 0 0 793.0 1603.0 24712 55.73674 9 0 0 0 0 0 0 14905408 0 0 789.0 1569.0 24223 54.63383 5 1 1 1 1 1 1 16355877 0 0 811.4 1628.2 24136 54.43760 12 882 882 882 882 882 882 13745586 0 0 728.0 1477.0 24754 55.83147 7 33 33 33 33 33 33 16044909 0 0 801.0 1620.2 24460 55.16837 col.sampletype &lt;- c(WT = &quot;#9E0142&quot;, EV = &quot;#D0384D&quot;, EH = &quot;#EE6445&quot;, H = &quot;#FA9C58&quot;) expDesign &lt;- condition expDesign$color &lt;- col.sampletype[as.vector(expDesign$condition)] 0.3.3 Histograms of counts per gene 0.3.3.1 matrix plot.new() hist(as.matrix(count.table), col = &quot;blue&quot;, border = &quot;white&quot;, breaks = 100) invisible(dev.off()) 0.3.3.2 truncated matrix plot.new() hist(as.matrix(count.table), col = &quot;blue&quot;, border = &quot;white&quot;, breaks = 20000, xlim = c(0, 500), main = &quot;Counts per gene&quot;, xlab = &quot;Counts (truncated axis)&quot;, ylab = &quot;Number of genes&quot;, las = 1, cex.axis = 0.7) invisible(dev.off()) 0.3.3.3 log2-transformation epsilon &lt;- 1 # pseudo-count to avoid problems with log(0) plot.new() hist(as.matrix(log2(count.table + epsilon)), breaks = 100, col = &quot;blue&quot;, border = &quot;white&quot;, main = &quot;Log2-transformed counts per gene&quot;, xlab = &quot;log2(counts+1)&quot;, ylab = &quot;Number of genes&quot;, las = 1, cex.axis = 0.7) invisible(dev.off()) 0.3.3.4 box-plot plot.new() boxplot(log2(count.table + epsilon), col = expDesign$color, pch = &quot;.&quot;, horizontal = TRUE, cex.axis = 0.5, las = 1, ylab = &quot;Samples&quot;, xlab = &quot;log2(Counts +1)&quot;) invisible(dev.off()) 0.3.3.5 density-plots plot.new() plotDensity(log2(count.table + epsilon), lty = 1, col = expDesign$color, lwd = 2) grid() legend(&quot;topright&quot;, legend = names(col.sampletype), col = col.sampletype, lwd = 2) invisible(dev.off()) 0.3.3.6 scatter-plots all points are aligned along the diagonal, with a relatively wider dispersion at the bottom, corresponding to small number fluctuations. comparing across samples types there are points discarding from the diagonal. plotFun &lt;- function(x, y) { dns &lt;- densCols(x, y) points(x, y, col = dns, pch = &quot;.&quot;, panel.first = grid()) abline(a = 0, b = 1, col = &quot;brown&quot;) } plot.new() pairs(log2(count.table[, sample(ncol(count.table), 12)] + epsilon), panel = plotFun, lower.panel = NULL) invisible(dev.off()) 0.3.4 Eliminate undetected genes prop.null &lt;- apply(count.table, 2, function(x) 100 * mean(x == 0)) plot.new() barplot(prop.null, main = &quot;Percentage of null counts per sample&quot;, horiz = TRUE, cex.names = 0.5, las = 1, col = expDesign$color, ylab = &quot;Samples&quot;, xlab = &quot;% of null counts&quot;) invisible(dev.off()) count.table &lt;- count.table[rowSums(count.table) &gt; 0, ] 0.3.5 Re-run DESeq2 &amp; Normalization dds0 &lt;- DESeqDataSetFromMatrix(countData = count.table, colData = expDesign, design = ~condition + experiment) dds.norm &lt;- estimateSizeFactors(dds0) # sizeFactors(dds.norm) 0.3.5.1 Plot normalized data 0.3.5.1.1 box-plot par(mfrow = c(1, 2), cex.lab = 0.7) boxplot(log2(counts(dds.norm) + epsilon), col = col.sampletype, cex.axis = 0.7, las = 1, xlab = &quot;log2(counts)&quot;, horizontal = TRUE, main = &quot;Raw counts&quot;) boxplot(log2(counts(dds.norm, normalized = TRUE) + epsilon), col = col.sampletype, cex.axis = 0.7, las = 1, xlab = &quot;log2(normalized counts)&quot;, horizontal = TRUE, main = &quot;Normalized counts&quot;) invisible(dev.off()) 0.3.5.1.2 density-plot par(mfrow = c(1, 2), cex.lab = 0.7) plotDensity(log2(counts(dds.norm) + epsilon), col = col.sampletype, xlab = &quot;log2(counts)&quot;, cex.lab = 0.7) plotDensity(log2(counts(dds.norm, normalized = TRUE) + epsilon), col = col.sampletype, xlab = &quot;log2(normalized counts)&quot;, cex.lab = 0.7) invisible(dev.off()) 0.3.6 Count variance is related to mean ## Computing mean and variance norm.counts &lt;- counts(dds.norm, normalized = TRUE) mean.counts &lt;- rowMeans(norm.counts) variance.counts &lt;- apply(norm.counts, 1, var) ## sum(mean.counts==0) # Number ## of completely undetected ## genes norm.counts.stats &lt;- data.frame(min = apply(norm.counts, 2, min), mean = apply(norm.counts, 2, mean), median = apply(norm.counts, 2, median), max = apply(norm.counts, 2, max), zeros = apply(norm.counts == 0, 2, sum), percent.zeros = 100 * apply(norm.counts == 0, 2, sum)/nrow(norm.counts), perc05 = apply(norm.counts, 2, quantile, 0.05), perc10 = apply(norm.counts, 2, quantile, 0.1), perc90 = apply(norm.counts, 2, quantile, 0.9), perc95 = apply(norm.counts, 2, quantile, 0.95)) kable(norm.counts.stats) min mean median max zeros percent.zeros perc05 perc10 perc90 perc95 S01 0 573.3060 10.42074 302131.5 6882 26.11269 0 0 1358.864 2394.581 S02 0 568.1465 10.61987 302188.5 6730 25.53595 0 0 1333.856 2346.992 S03 0 579.9790 10.64411 321006.9 6733 25.54733 0 0 1346.963 2362.604 S04 0 581.0388 10.02579 350783.2 6890 26.14305 0 0 1359.497 2363.379 S05 0 572.3780 11.98990 374807.9 6154 23.35041 0 0 1294.909 2275.314 S06 0 568.7111 12.61162 383578.0 6562 24.89850 0 0 1278.360 2241.773 S07 0 579.0621 12.36500 380738.5 6478 24.57978 0 0 1304.032 2315.395 S08 0 584.3166 11.54536 366004.1 6383 24.21931 0 0 1328.870 2354.868 S09 0 543.7968 12.49969 260979.1 6241 23.68052 0 0 1306.698 2255.713 S10 0 560.4016 11.20687 265525.5 6653 25.24379 0 0 1335.656 2337.041 S11 0 555.9397 10.97169 230312.2 6372 24.17758 0 0 1360.489 2350.684 S12 0 567.6020 10.88288 264424.5 6772 25.69531 0 0 1381.255 2399.239 ## Mean and variance ## relationship mean.var.col &lt;- densCols(x = log2(mean.counts), y = log2(variance.counts)) plot.new() plot(x = log2(mean.counts), y = log2(variance.counts), pch = 16, cex = 0.5, col = mean.var.col, main = &quot;Mean-variance relationship&quot;, xlab = &quot;Mean log2(normalized counts) per gene&quot;, ylab = &quot;Variance of log2(normalized counts)&quot;, panel.first = grid()) abline(a = 0, b = 1, col = &quot;brown&quot;) invisible(dev.off()) 0.3.7 Estimated Dispersion for each gene Shows the mean of normalized counts (x axis) and dispersion estimate for each genes ## Performing estimation of ## dispersion parameter dds.disp &lt;- estimateDispersions(dds.norm) plotDispEsts(dds.disp) invisible(dev.off()) 0.3.8 PCA amd heatmap on all samples using reguralized log transformation Transforms the count data to the log2 scale in a way which minimizes differences between samples for rows with small counts, and which normalizes with respect to library size. 0.3.8.1 PCA using rlog rld &lt;- rlog(dds.disp, blind = TRUE) hmcol &lt;- colorRampPalette(brewer.pal(11, &quot;Spectral&quot;))(12) plotPCA(rld, ntop = 5000, intgroup = c(&quot;condition&quot;, &quot;experiment&quot;)) + scale_color_manual(values = hmcol) invisible(dev.off()) 0.3.8.2 Heatmap of count matrix for first 50 genes select &lt;- order(rowMedians(counts(dds.disp, normalized = TRUE)), decreasing = TRUE)[1:50] df &lt;- as.data.frame(colData(dds.disp)[, c(&quot;condition&quot;, &quot;experiment&quot;)]) # Heatmap of count matrix pheatmap(assay(rld)[select, ], cluster_rows = TRUE, show_rownames = TRUE, cluster_cols = TRUE, annotation_col = df) invisible(dev.off()) 0.3.8.3 Heatmap of sample distance based on rlog sampleDists &lt;- dist(t(assay(rld))) sampleDistMatrix &lt;- as.matrix(sampleDists) rownames(sampleDistMatrix) &lt;- paste(rld$condition, rld$experiment, sep = &quot;-&quot;) colnames(sampleDistMatrix) &lt;- NULL colors &lt;- colorRampPalette(rev(brewer.pal(9, &quot;Blues&quot;)))(255) pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors) invisible(dev.off()) 0.3.9 Perform differential expression call 0.3.9.1 Set standard cutoff and Enhanced Volcano Plots p_cutoff = 0.1 fc_cutoff = 0.5 xlim &lt;- c(1, 1e+05) ylim &lt;- c(-6, 6) wald.test &lt;- nbinomWaldTest(dds.disp) enhanced_volcano_plots &lt;- function(title, results, pvalue, foldchange) { p = EnhancedVolcano(results, lab = rownames(results), x = &quot;log2FoldChange&quot;, y = &quot;padj&quot;, xlab = bquote(~Log[2] ~ &quot;fold change&quot;), ylab = bquote(~-Log[10] ~ adjusted ~ italic(P)), pCutoff = pvalue, FCcutoff = foldchange, xlim = c(-6, 6), transcriptLabSize = 3, title = title, colAlpha = 1, legend = c(&quot;NS&quot;, &quot;Log2 FC&quot;, &quot;Adjusted p-value&quot;, &quot;Adjusted p-value &amp; Log2 FC&quot;), legendPosition = &quot;bottom&quot;, legendLabSize = 10, legendIconSize = 3, DrawConnectors = TRUE, widthConnectors = 0.5, colConnectors = &quot;black&quot;) return(p) } plotCounts_gg &lt;- function(i, dds, intgroup) { group &lt;- if (length(intgroup) == 1) { colData(dds)[[intgroup]] } else if (length(intgroup) == 2) { lvls &lt;- as.vector(t(outer(levels(colData(dds)[[intgroup[1]]]), levels(colData(dds)[[intgroup[2]]]), function(x, y) paste(x, y, sep = &quot; : &quot;)))) droplevels(factor(apply(as.data.frame(colData(dds)[, intgroup, drop = FALSE]), 1, paste, collapse = &quot; : &quot;), levels = lvls)) } else { factor(apply(as.data.frame(colData(dds)[, intgroup, drop = FALSE]), 1, paste, collapse = &quot; : &quot;)) } data &lt;- plotCounts(dds, gene = i, intgroup = intgroup, returnData = TRUE) data &lt;- cbind(data, data.frame(group = group)) main &lt;- rownames(dds)[i] ggplot(data, aes(x = group, y = count)) + geom_boxplot() + ylab(&quot;Normalized count&quot;) + ggtitle(main) + coord_trans(y = &quot;log2&quot;) + scale_x_discrete(limits = c(&quot;WT&quot;, &quot;EV&quot;, &quot;EH&quot;, &quot;H&quot;)) } 0.3.9.2 Untreated (WT) vs EPO with Vehicle (EV) 0.3.9.2.1 Plots 0.3.9.2.1.1 MA-plot res_WT_EV &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;EV&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_WT_EV_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;EV&quot;), res = res_WT_EV, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_WT_EV, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_WT_EV_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.2.1.2 Historgram of adjusted p-values hist(res_WT_EV$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.2.1.3 Volacano-plot resOrdered_WT_EV &lt;- res_WT_EV[order(res_WT_EV$padj), ] write.csv(as.data.frame(resOrdered_WT_EV), file = &quot;condition_WT_EV_alpha0.1_results.csv&quot;) WT_EV_p1 &lt;- enhanced_volcano_plots(&quot;WT vs. EV (padj=0.05,log2fc=0.5)&quot;, res_WT_EV, 0.05, fc_cutoff) WT_EV_p2 &lt;- enhanced_volcano_plots(&quot;WT vs. EV (padj=0.1,log2fc=0.5)&quot;, res_WT_EV, p_cutoff, fc_cutoff) grid.arrange(WT_EV_p1, WT_EV_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.2.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_WT_EV$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.2.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_WT_EV)[res_WT_EV$padj &lt;= p_cutoff &amp; !is.na(res_WT_EV$padj) &amp; ( res_WT_EV$log2FoldChange &lt;= -0.5 | res_WT_EV$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.2.3 Do functional enrichment res_WT_EV.df &lt;- na.omit(data.frame(res_WT_EV)) induced.sign &lt;- rownames(res_WT_EV.df)[res_WT_EV.df$log2FoldChange &gt;= 0.5 &amp; res_WT_EV.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value kable(term.induced[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis wit gProfileR. ** &quot;) } ## No genes found that have induced expression repressed.sign &lt;- rownames(res_WT_EV.df)[res_WT_EV.df$log2FoldChange &lt;= -0.5 &amp; res_WT_EV.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] kable(term.repressed[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) } (#tab:code block 27)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 13 Jak-STAT signaling pathway 162 22 8 0.049 0.364 7.00e-07 IL4R,OSM,CISH,SOCS2,CDKN1A,MYC,PIM1,SOCS3 17 Signaling by Interleukins 463 21 10 0.022 0.476 1.60e-06 IL4R,OSM,CISH,SOCS2,CD80,CDKN1A,MYC,PIM1,SOCS3,IRS2 15 Cytokine Signaling in Immune system 685 21 11 0.016 0.524 4.60e-06 IL4R,OSM,CISH,EGR1,SOCS2,CD80,CDKN1A,MYC,PIM1,SOCS3,IRS2 18 Interleukin-4 and 13 signaling 111 21 6 0.054 0.286 1.68e-05 IL4R,OSM,CDKN1A,MYC,PIM1,SOCS3 16 Growth hormone receptor signaling 24 21 4 0.167 0.190 3.57e-05 CISH,SOCS2,SOCS3,IRS2 8 response to insulin 255 37 7 0.027 0.189 1.06e-03 CISH,EGR1,SOCS2,MYC,SOCS3,IRS2,PPARA 14 Immune System 2010 21 13 0.006 0.619 5.50e-03 IL4R,OSM,CISH,EGR1,SOCS2,CD80,CDKN1A,MYC,PIM1,MB21D1,HSPA6,SOCS3,IRS2 1 response to oxygen-containing compound 1555 37 13 0.008 0.351 7.17e-03 CPEB4,CISH,KLF9,EGR1,SOCS2,CDKN1A,MYC,PIM1,AQP3,RARG,SOCS3,IRS2,PPARA 20 TFAP2 (AP-2) family regulates transcription of cell cycle factors 5 21 2 0.400 0.095 1.11e-02 CDKN1A,MYC 19 Interleukin-7 signaling 36 21 3 0.083 0.143 1.38e-02 CISH,SOCS2,IRS2 # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.3 Untreated (WT) vs EPO with HMGB1 (EH) 0.3.9.3.1 Plots 0.3.9.3.1.1 MA-plot res_WT_EH &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;EH&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_WT_EH_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;EH&quot;), res = res_WT_EV, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_WT_EH, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_WT_EH_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.3.1.2 Historgram of adjusted p-values hist(res_WT_EH$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.3.1.3 Volacano-plot resOrdered_WT_EH &lt;- res_WT_EH[order(res_WT_EH$padj), ] write.csv(as.data.frame(resOrdered_WT_EH), file = &quot;condition_WT_EH_alpha0.1_results.csv&quot;) WT_EH_p1 &lt;- enhanced_volcano_plots(&quot;WT vs. EH (padj=0.05,log2fc=0.5)&quot;, res_WT_EH, 0.05, fc_cutoff) WT_EH_p2 &lt;- enhanced_volcano_plots(&quot;WT vs. EH (padj=0.1,log2fc=0.5)&quot;, res_WT_EH, p_cutoff, fc_cutoff) grid.arrange(WT_EH_p1, WT_EH_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.3.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_WT_EH$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.3.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_WT_EH)[res_WT_EH$padj &lt;= p_cutoff &amp; !is.na(res_WT_EH$padj) &amp; ( res_WT_EH$log2FoldChange &lt;= -0.5 | res_WT_EH$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.3.3 Do functional enrichment res_WT_EH.df &lt;- na.omit(data.frame(res_WT_EH)) induced.sign &lt;- rownames(res_WT_EV.df)[res_WT_EH.df$log2FoldChange &gt;= 0.5 &amp; res_WT_EH.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value kable(term.induced[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis wit gProfileR. ** &quot;) } (#tab:code block 33)Table: induced gene functional analysis wit gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 1 macrolide binding 16 45 3 0.188 0.067 0.0201 FKBP4,FKBP3,FKBP2 2 FK506 binding 16 45 3 0.188 0.067 0.0201 FKBP4,FKBP3,FKBP2 3 Factor: E2F-3; motif: GGCGGGN; match class: 1 9297 45 35 0.004 0.778 0.0464 FKBP4,RANBP3,SNX24,XPO1,ZFAND6,KIF16B,FKBP3,TRIB3,RELB,FAM184A,ZNF142,LGALSL,ACTR10,TET1,COL6A1,DCAF6,CDCA7,TAGLN,HNRNPDL,TRIM11,OTUD6B,EYA3,ERCC3,DACT1,FAM69B,SPATA33,DDB1,UPF3A,DUS1L,ZNF524,FKBP2,TALDO1,LIN28B,DACT3,ZNF521 NA NA NA NA NA NA NA NA NA NA.1 NA NA NA NA NA NA NA NA NA.2 NA NA NA NA NA NA NA NA NA.3 NA NA NA NA NA NA NA NA NA.4 NA NA NA NA NA NA NA NA NA.5 NA NA NA NA NA NA NA NA NA.6 NA NA NA NA NA NA NA NA repressed.sign &lt;- rownames(res_WT_EH.df)[res_WT_EH.df$log2FoldChange &lt;= -0.5 &amp; res_WT_EH.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] kable(term.repressed[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) } (#tab:code block 33)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 19 Cytokine Signaling in Immune system 685 22 11 0.016 0.500 7.90e-06 ICAM1,OSM,NFKBIA,RELB,CISH,EGR1,SOCS2,IRF1,MYC,PIM1,JUN 18 Immune System 2010 22 16 0.008 0.727 1.80e-05 ICAM1,OSM,NFKBIA,RELB,CISH,TNFAIP3,EGR1,SOCS2,IRF1,MYC,PIM1,NFKBIE,MB21D1,SLCO4C1,JUN,UBOX5 13 Epstein-Barr virus infection 197 26 7 0.036 0.269 2.44e-04 ICAM1,NFKBIA,RELB,TNFAIP3,MYC,NFKBIE,JUN 20 Signaling by Interleukins 463 22 8 0.017 0.364 6.51e-04 ICAM1,OSM,NFKBIA,CISH,SOCS2,MYC,PIM1,JUN 3 I-kappaB/NF-kappaB complex 7 42 3 0.429 0.071 8.70e-04 BCL3,NFKBIA,RELB 22 Factor: E2F; motif: GGCGSG; match class: 1 10205 42 37 0.004 0.881 1.14e-03 MSMO1,VMP1,KLF6,BCL3,ICAM1,OSM,NFKBIA,RELB,ARRDC3,CISH,TNFAIP3,EGR1,SOCS2,ARL4A,IRF1,A4GALT,TMEM160,NINJ1,BHLHE40,STX11,MYC,PIM1,NFKBIZ,NFKBIE,RAB11FIP1,ETS2,ANKRD33B,MB21D1,KCNK5,LETM2,STARD5,SLCO4C1,JUN,DDN,H1FX,UBOX5,TSC22D2 11 HTLV-I infection 253 26 7 0.028 0.269 1.26e-03 ICAM1,NFKBIA,RELB,EGR1,MYC,ETS2,JUN 14 C-type lectin receptor signaling pathway 104 26 5 0.048 0.192 1.70e-03 BCL3,NFKBIA,RELB,IRF1,JUN 15 TNF signaling pathway 108 26 5 0.046 0.192 2.04e-03 BCL3,ICAM1,NFKBIA,TNFAIP3,JUN 9 TNF-alpha/NF-kappa B signaling complex (CHUK, KPNA3, NFKB2, NFKBIB, REL, IKBKG, NFKB1, NFKBIE, RELB, NFKBIA, RELA, TNIP2) 12 12 3 0.250 0.250 2.54e-03 NFKBIA,RELB,NFKBIE # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.4 Untreated (WT) vs HMGB1 (H) 0.3.9.4.1 Plots 0.3.9.4.1.1 MA-plot res_WT_H &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;H&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_WT_H_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;H&quot;), res = res_WT_H, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_WT_H, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_WT_H_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.4.1.2 Historgram of adjusted p-values hist(res_WT_H$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.4.1.3 Volacano-plot resOrdered_WT_H &lt;- res_WT_H[order(res_WT_H$padj), ] write.csv(as.data.frame(resOrdered_WT_H), file = &quot;condition_WT_H_alpha0.1_results.csv&quot;) WT_H_p1 &lt;- enhanced_volcano_plots(&quot;WT vs. H (padj=0.05,log2fc=0.5)&quot;, res_WT_H, 0.05, fc_cutoff) WT_H_p2 &lt;- enhanced_volcano_plots(&quot;WT vs. H (padj=0.1,log2fc=0.5)&quot;, res_WT_H, p_cutoff, fc_cutoff) grid.arrange(WT_H_p1, WT_H_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.4.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_WT_H$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.4.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_WT_H)[res_WT_H$padj &lt;= p_cutoff &amp; !is.na(res_WT_H$padj) &amp; ( res_WT_H$log2FoldChange &lt;= -0.5 | res_WT_H$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.4.3 Do functional enrichment res_WT_H.df &lt;- na.omit(data.frame(res_WT_H)) induced.sign &lt;- rownames(res_WT_H.df)[res_WT_H.df$log2FoldChange &gt;= 0.5 &amp; res_WT_H.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value kable(term.induced[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis wit gProfileR. ** &quot;) } (#tab:code block 39)Table: induced gene functional analysis wit gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection NA NA NA NA NA NA NA NA NA NA.1 NA NA NA NA NA NA NA NA NA.2 NA NA NA NA NA NA NA NA NA.3 NA NA NA NA NA NA NA NA NA.4 NA NA NA NA NA NA NA NA NA.5 NA NA NA NA NA NA NA NA NA.6 NA NA NA NA NA NA NA NA NA.7 NA NA NA NA NA NA NA NA NA.8 NA NA NA NA NA NA NA NA NA.9 NA NA NA NA NA NA NA NA repressed.sign &lt;- rownames(res_WT_H.df)[res_WT_H.df$log2FoldChange &lt;= -0.5 &amp; res_WT_H.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] kable(term.repressed[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) } (#tab:code block 39)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 10 TNF signaling pathway 108 14 5 0.046 0.357 6.81e-05 BCL3,ICAM1,NFKBIA,TNFAIP3,JUN 7 Epstein-Barr virus infection 197 14 5 0.025 0.357 1.31e-03 ICAM1,NFKBIA,TNFAIP3,NFKBIE,JUN 3 CHUK-NFKB2-REL-IKBKG-SPAG9-NFKB1-NFKBIE-COPB2-TNIP1-NFKBIA-RELA-TNIP2 complex 12 6 2 0.167 0.333 1.11e-02 NFKBIA,NFKBIE 4 TNF-alpha/NF-kappa B signaling complex (CHUK, KPNA3, NFKB2, NFKBIB, REL, IKBKG, NFKB1, NFKBIE, RELB, NFKBIA, RELA, TNIP2) 12 6 2 0.167 0.333 1.11e-02 NFKBIA,NFKBIE 2 regulation of DNA binding transcription factor activity 400 23 6 0.015 0.261 1.34e-02 ICAM1,NFKBIA,TNFAIP3,BHLHE40,NFKBIE,JUN 9 B cell receptor signaling pathway 70 14 3 0.043 0.214 1.68e-02 NFKBIA,NFKBIE,JUN 1 nucleotide-binding oligomerization domain containing 1 signaling pathway 4 23 2 0.500 0.087 1.93e-02 NFKBIA,TNFAIP3 12 Factor: NF-kappaB; motif: GGGGATYCCC 6390 22 17 0.003 0.773 3.27e-02 BCL3,ICAM1,HIVEP1,NFKBIA,ARRDC3,TNFAIP3,NINJ1,STX11,NFKBIZ,NFKBIE,ZFP36L2,KLF15,TPSAB1,SLCO4C1,FAM174A,JUN,H1F0 13 Factor: NF-kappaB; motif: GGGGATYCCC; match class: 0 6390 22 17 0.003 0.773 3.27e-02 BCL3,ICAM1,HIVEP1,NFKBIA,ARRDC3,TNFAIP3,NINJ1,STX11,NFKBIZ,NFKBIE,ZFP36L2,KLF15,TPSAB1,SLCO4C1,FAM174A,JUN,H1F0 11 Th1 and Th2 cell differentiation 90 14 3 0.033 0.214 3.53e-02 NFKBIA,NFKBIE,JUN # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.5 EPO with Vehicle (EV) vs EPO with HMGB1 (EH) 0.3.9.5.1 Plots 0.3.9.5.1.1 MA-plot res_EV_EH &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;EV&quot;, &quot;EH&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_EV_EH_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;EV&quot;, &quot;EH&quot;), res = res_EV_EH, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_EV_EH, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_EV_EH_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.5.1.2 Historgram of adjusted p-values hist(res_EV_EH$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.5.1.3 Volacano-plot resOrdered_EV_EH &lt;- res_EV_EH[order(res_EV_EH$padj), ] write.csv(as.data.frame(resOrdered_EV_EH), file = &quot;condition_EV_EH_alpha0.1_results.csv&quot;) EV_EH_p1 &lt;- enhanced_volcano_plots(&quot;EV vs. EH (padj=0.05,log2fc=0.5)&quot;, res_EV_EH, 0.05, fc_cutoff) EV_EH_p2 &lt;- enhanced_volcano_plots(&quot;EV vs. EH (padj=0.1,log2fc=0.5)&quot;, res_EV_EH, p_cutoff, fc_cutoff) grid.arrange(EV_EH_p1, EV_EH_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.5.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_EV_EH$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.5.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_EV_EH)[res_EV_EH$padj &lt;= p_cutoff &amp; !is.na(res_EV_EH$padj) &amp; ( res_EV_EH$log2FoldChange &lt;= -0.5 | res_EV_EH$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.5.3 Do functional enrichment res_EV_EH.df &lt;- na.omit(data.frame(res_EV_EH)) induced.sign &lt;- rownames(res_EV_EH.df)[res_EV_EH.df$log2FoldChange &gt;= 0.5 &amp; res_EV_EH.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value kable(term.induced[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis wit gProfileR. ** &quot;) } (#tab:code block 45)Table: induced gene functional analysis wit gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 2 positive regulation of tau-protein kinase activity 4 25 2 0.500 0.080 0.0200 EGR1,NAB2 3 regulation of cellular protein metabolic process 2438 25 12 0.005 0.480 0.0344 GADD45B,EIF5,EEF2K,GPLD1,EGR1,ID1,HSPA2,ARRDC4,DUSP2,NAB2,SH3BP5L,HSPA1A 4 Attenuation phase 14 15 2 0.143 0.133 0.0439 HSPA2,HSPA1A 1 regulation of tau-protein kinase activity 6 25 2 0.333 0.080 0.0499 EGR1,NAB2 NA NA NA NA NA NA NA NA NA NA.1 NA NA NA NA NA NA NA NA NA.2 NA NA NA NA NA NA NA NA NA.3 NA NA NA NA NA NA NA NA NA.4 NA NA NA NA NA NA NA NA NA.5 NA NA NA NA NA NA NA NA repressed.sign &lt;- rownames(res_EV_EH.df)[res_EV_EH.df$log2FoldChange &lt;= -0.5 &amp; res_EV_EH.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] kable(term.repressed[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) } (#tab:code block 45)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 28 TNF signaling pathway 108 15 7 0.065 0.467 0.00e+00 BIRC3,TRAF1,BCL3,ICAM1,NFKBIA,TNFAIP3,JUN 29 NF-kappa B signaling pathway 93 15 6 0.065 0.400 9.00e-07 BIRC3,TRAF1,ICAM1,NFKBIA,RELB,TNFAIP3 30 Epstein-Barr virus infection 197 15 7 0.036 0.467 2.70e-06 TRAF1,ICAM1,NFKBIA,RELB,TNFAIP3,NFKBIE,JUN 21 I-kappaB/NF-kappaB complex 7 20 3 0.429 0.150 7.49e-05 BCL3,NFKBIA,RELB 12 regulation of DNA binding transcription factor activity 400 20 7 0.018 0.350 2.14e-04 TRAF1,ICAM1,NFKBIA,TNFAIP3,BHLHE40,NFKBIE,JUN 23 TNF-alpha/NF-kappa B signaling complex (CHUK, KPNA3, NFKB2, NFKBIB, REL, IKBKG, NFKB1, NFKBIE, RELB, NFKBIA, RELA, TNIP2) 12 8 3 0.250 0.375 3.12e-04 NFKBIA,RELB,NFKBIE 41 TNFR1-induced NFkappaB signaling pathway 26 12 3 0.115 0.250 7.68e-04 BIRC3,TRAF1,TNFAIP3 19 cellular response to tumor necrosis factor 290 20 6 0.021 0.300 7.94e-04 BIRC3,TNFRSF9,TRAF1,ICAM1,NFKBIA,TNFAIP3 18 response to tumor necrosis factor 307 20 6 0.020 0.300 1.11e-03 BIRC3,TNFRSF9,TRAF1,ICAM1,NFKBIA,TNFAIP3 40 Regulation of TNFR1 signaling 33 12 3 0.091 0.250 1.61e-03 BIRC3,TRAF1,TNFAIP3 # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.6 EPO with Vehicle (EV) vs HMGB1 (H) 0.3.9.6.1 Plots 0.3.9.6.1.1 MA-plot res_EV_H &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;EV&quot;, &quot;H&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_EV_H_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;EV&quot;, &quot;H&quot;), res = res_EV_H, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_EV_H, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_EV_H_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.6.1.2 Historgram of adjusted p-values hist(res_EV_H$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.6.1.3 Volacano-plot resOrdered_EV_H &lt;- res_EV_H[order(res_EV_H$padj), ] write.csv(as.data.frame(resOrdered_EV_H), file = &quot;condition_EV_H_alpha0.1_results.csv&quot;) EV_H_p1 &lt;- enhanced_volcano_plots(&quot;EV vs. H (padj=0.05,log2fc=0.5)&quot;, res_EV_H, 0.05, fc_cutoff) EV_H_p2 &lt;- enhanced_volcano_plots(&quot;EV vs. H (padj=0.1,log2fc=0.5)&quot;, res_EV_H, p_cutoff, fc_cutoff) grid.arrange(EV_H_p1, EV_H_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.6.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_EV_H$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.6.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_EV_H)[res_EV_H$padj &lt;= p_cutoff &amp; !is.na(res_EV_H$padj) &amp; ( res_EV_H$log2FoldChange &lt;= -0.5 | res_EV_H$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.6.3 Do functional enrichment res_EV_H.df &lt;- na.omit(data.frame(res_EV_H)) induced.sign &lt;- rownames(res_EV_H.df)[res_EV_H.df$log2FoldChange &gt;= 0.5 &amp; res_EV_H.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value kable(term.induced[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis wit gProfileR. ** &quot;) } (#tab:code block 51)Table: induced gene functional analysis wit gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 36 Growth hormone receptor signaling 24 35 5 0.208 0.143 3.80e-06 CISH,SOCS2,SOCS3,SOCS1,IRS2 35 Cytokine Signaling in Immune system 685 35 12 0.018 0.343 3.36e-04 OSM,CISH,EGR1,SOCS2,CD80,CDKN1A,PIM1,EIF4A1,FOS,SOCS3,SOCS1,IRS2 39 Interleukin-4 and 13 signaling 111 35 6 0.054 0.171 4.71e-04 OSM,CDKN1A,PIM1,FOS,SOCS3,SOCS1 37 Signaling by Interleukins 463 35 10 0.022 0.286 5.17e-04 OSM,CISH,SOCS2,CD80,CDKN1A,PIM1,FOS,SOCS3,SOCS1,IRS2 34 Jak-STAT signaling pathway 162 35 7 0.043 0.200 6.45e-04 OSM,CISH,SOCS2,CDKN1A,PIM1,SOCS3,SOCS1 14 negative regulation of kinase activity 272 66 9 0.033 0.136 1.01e-03 GADD45B,CISH,SOCS2,CDKN1A,DUSP2,SH3BP5L,SOCS3,SOCS1,IRS2 32 Prolactin signaling pathway 70 35 5 0.071 0.143 1.27e-03 CISH,SOCS2,FOS,SOCS3,SOCS1 38 Interleukin-7 signaling 36 35 4 0.111 0.114 1.74e-03 CISH,SOCS2,SOCS1,IRS2 13 negative regulation of transferase activity 298 66 9 0.030 0.136 2.18e-03 GADD45B,CISH,SOCS2,CDKN1A,DUSP2,SH3BP5L,SOCS3,SOCS1,IRS2 31 protein kinase inhibitor activity 95 66 6 0.063 0.091 2.52e-03 CISH,SOCS2,CDKN1A,SH3BP5L,SOCS3,SOCS1 repressed.sign &lt;- rownames(res_EV_H.df)[res_EV_H.df$log2FoldChange &lt;= -0.5 &amp; res_EV_H.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] kable(term.repressed[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) } (#tab:code block 51)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 16 TNF signaling pathway 108 17 7 0.065 0.412 1.00e-07 BIRC3,TRAF1,BCL3,ICAM1,NFKBIA,TNFAIP3,JUN 15 NF-kappa B signaling pathway 93 17 5 0.054 0.294 9.21e-05 BIRC3,TRAF1,ICAM1,NFKBIA,TNFAIP3 4 cellular response to tumor necrosis factor 290 24 7 0.024 0.292 9.55e-05 BIRC3,TNFRSF9,TRAF1,ICAM1,NFKBIA,TNFAIP3,ZFP36L2 3 response to tumor necrosis factor 307 24 7 0.023 0.292 1.41e-04 BIRC3,TNFRSF9,TRAF1,ICAM1,NFKBIA,TNFAIP3,ZFP36L2 7 liver development 139 24 5 0.036 0.208 1.47e-03 NFKBIA,TNFAIP3,SLCO2B1,CITED2,JUN 21 TNFR1-induced NFkappaB signaling pathway 26 15 3 0.115 0.200 1.53e-03 BIRC3,TRAF1,TNFAIP3 6 hepaticobiliary system development 142 24 5 0.035 0.208 1.64e-03 NFKBIA,TNFAIP3,SLCO2B1,CITED2,JUN 22 Regulation of TNFR1 signaling 33 15 3 0.091 0.200 3.20e-03 BIRC3,TRAF1,TNFAIP3 13 Epstein-Barr virus infection 197 17 5 0.025 0.294 3.60e-03 TRAF1,ICAM1,NFKBIA,TNFAIP3,JUN 5 tumor necrosis factor-mediated signaling pathway 174 24 5 0.029 0.208 4.46e-03 BIRC3,TNFRSF9,TRAF1,NFKBIA,TNFAIP3 # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.7 EPO with HMGB1 (EH) vs HMGB1 (H) 0.3.9.7.1 Plots 0.3.9.7.1.1 MA-plot res_EH_H &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;EH&quot;, &quot;H&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_EH_H_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;EH&quot;, &quot;H&quot;), res = res_EH_H, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_EH_H, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_EH_H_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.7.1.2 Historgram of adjusted p-values hist(res_EH_H$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.7.1.3 Volacano-plot resOrdered_EH_H &lt;- res_EH_H[order(res_EH_H$padj), ] write.csv(as.data.frame(resOrdered_EH_H), file = &quot;condition_EH_H_alpha0.1_results.csv&quot;) EH_H_p1 &lt;- enhanced_volcano_plots(&quot;EH vs. H (padj=0.05,log2fc=0.5)&quot;, res_EH_H, 0.05, fc_cutoff) EH_H_p2 &lt;- enhanced_volcano_plots(&quot;EH vs. H (padj=0.1,log2fc=0.5)&quot;, res_EH_H, p_cutoff, fc_cutoff) grid.arrange(EH_H_p1, EH_H_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.7.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_EH_H$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.7.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_EH_H)[res_EH_H$padj &lt;= p_cutoff &amp; !is.na(res_EH_H$padj) &amp; ( res_EH_H$log2FoldChange &lt;= -0.5 | res_EH_H$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.7.3 Do functional enrichment res_EH_H.df &lt;- na.omit(data.frame(res_EH_H)) induced.sign &lt;- rownames(res_EH_H.df)[res_EH_H.df$log2FoldChange &gt;= 0.5 &amp; res_EH_H.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value kable(term.induced[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis wit gProfileR. ** &quot;) } (#tab:code block 57)Table: induced gene functional analysis wit gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 3 Jak-STAT signaling pathway 162 6 4 0.025 0.667 0.000146 OSM,CISH,SOCS2,PIM1 4 Cytokine Signaling in Immune system 685 7 5 0.007 0.714 0.004300 OSM,CISH,EGR1,SOCS2,PIM1 7 Growth hormone receptor signaling 24 7 2 0.083 0.286 0.020700 CISH,SOCS2 5 Signaling by Interleukins 463 7 4 0.009 0.571 0.023100 OSM,CISH,SOCS2,PIM1 6 Interleukin-7 signaling 36 7 2 0.056 0.286 0.047100 CISH,SOCS2 1 EGR-EP300 complex 2 2 1 0.500 0.500 0.049800 EGR1 2 RCP-Rab11 complex 2 2 1 0.500 0.500 0.049800 RAB11FIP1 NA NA NA NA NA NA NA NA NA NA.1 NA NA NA NA NA NA NA NA NA.2 NA NA NA NA NA NA NA NA repressed.sign &lt;- rownames(res_EH_H.df)[res_EH_H.df$log2FoldChange &lt;= -0.5 &amp; res_EH_H.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] kable(term.repressed[1:10, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) } ## No genes found that have repressed expression # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) "]
]
