[
["_main.html", "“Clustering and differential analysis of CFU-E cells with different conditions” 0.1 Table of Contents 0.2 Summary of Experiment: 0.3 Exploring data with DESeq2", " “Clustering and differential analysis of CFU-E cells with different conditions” Ronak Shah July 27th 2017 0.1 Table of Contents Summary of Experiment: Exploring data with DESeq2 Running DESeq2 Make counts table to explore that data Histograms of counts per gene matrix truncated matrix box-plotdensity-plots scatter-plots Eliminate undetected genes Re-run DESeq2 &amp; Normalization Plot normalized data Count variance is related to mean Estimated Dispersion for each gene PCA and heatmap on all samples using reguralized log transformation PCA using rlog Heatmap of count matrix for first 50 genes Heatmap of sample distance based on rlog Perform differential expression call Set standard cutoff and Enhanced Volcano Plots Untreated (WT) vs EPO with Vehicle (EV) Untreated (WT) vs EPO with HMGB1 (EH) Untreated (WT) vs HMGB1 (H) EPO with Vehicle (EV) vs EPO with HMGB1 (EH) EPO with Vehicle (EV) vs HMGB1 (H) EPO with HMGB1 (EH) vs HMGB1 (H) # Load libraries set.seed(0) source(&quot;https://bioconductor.org/biocLite.R&quot;) library(&quot;DESeq2&quot;) library(&quot;RColorBrewer&quot;) library(&quot;vsn&quot;) library(&quot;pheatmap&quot;) library(&quot;EnhancedVolcano&quot;) library(&quot;gridExtra&quot;) library(&quot;grid&quot;) library(&quot;ggplot2&quot;) library(&quot;gplots&quot;) library(&quot;affy&quot;) library(&quot;reshape2&quot;) library(&quot;gProfileR&quot;) library(&quot;ComplexHeatmap&quot;) library(&quot;kableExtra&quot;) 0.2 Summary of Experiment: Flow-sorted Colony-Forming Units of Erythroid (CFU-E) cells. The cells are then starved for six hours to stop the Erythropoietin (EPO). Then these cells are treated with: EPO + Vehicle (Peripheral Blood Smear (PBS)) EPO + High mobility group box 1 (HMGB1) protein HMGB1 The treatment occurs for sixty minutes and then RNA was extracted. Three biological replicates are used for reproducibility. Single-end stranded RNA-seq performed on wild-type EPO starved cells and treated with 1,2,3 as stated above. Labels: WT =&gt; Untreated EV =&gt; EPO + Vehicle EH =&gt; EPO + HMGB1 H =&gt; HMGB1 E1 =&gt; Samples from Patient 1 E2 =&gt; Samples from Patient 2 E3 =&gt; Samples from Patient 3 0.3 Exploring data with DESeq2 directory &lt;- &quot;/Users/rshah22/Documents/Projects/RNAseq_Erythrocid/counts_analysis/&quot; files &lt;- read.table(paste(directory, &quot;deseq2_sampleinfo.txt&quot;, sep = &quot;&quot;), header = T) condition &lt;- read.csv(paste(directory, &quot;deseq2_phenotype.txt&quot;, sep = &quot;&quot;), header = T) sampleTable &lt;- data.frame(sampleName = files$sampleName, fileName = files$fileName, condition.type = condition$condition, condition.treatment = condition$treatment, condition.experiment = condition$experiment) ddsHTSeq &lt;- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable, directory = directory, design = ~condition.type + condition.experiment) # ddsHTSeq ddsHTSeq$condition.type &lt;- factor(ddsHTSeq$condition.type, levels = c(&quot;WT&quot;, &quot;EV&quot;, &quot;EH&quot;, &quot;H&quot;)) ddsHTSeq$condition.experiment &lt;- factor(ddsHTSeq$condition.experiment, levels = c(&quot;E1&quot;, &quot;E2&quot;, &quot;E3&quot;)) 0.3.1 Running DESeq2 dds &lt;- DESeq(ddsHTSeq) 0.3.2 Make counts table to explore that data count.table &lt;- counts(dds) count.table &lt;- count.table[-c((grep(&quot;^HIST|RNA|^RP11|^LINC|^RPL|^RNVU&quot;, rownames(count.table)))), ] stats.per.sample &lt;- data.frame(t(do.call(cbind, lapply(count.table, summary)))) stats.per.sample$libsum &lt;- apply(count.table, 2, sum) ## libsum stats.per.sample$perc05 &lt;- apply(count.table, 2, quantile, 0.05) stats.per.sample$perc10 &lt;- apply(count.table, 2, quantile, 0.1) stats.per.sample$perc90 &lt;- apply(count.table, 2, quantile, 0.9) stats.per.sample$perc95 &lt;- apply(count.table, 2, quantile, 0.95) stats.per.sample$zeros &lt;- apply(count.table == 0, 2, sum) stats.per.sample$percent.zeros &lt;- 100 * stats.per.sample$zeros/nrow(count.table) kable(stats.per.sample[sample(1:ncol(count.table), size = 10), ], caption = &quot;**Table: statistics per sample. ** We only display a random selection of 10 samples. &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) (#tab:code block 4)Table: statistics per sample. We only display a random selection of 10 samples. Min. X1st.Qu. Median Mean X3rd.Qu. Max. libsum perc05 perc10 perc90 perc95 zeros percent.zeros 11 0 0 0 0 0 0 15453771 0 0 884 1739.5 23465 54.47981 3 5 5 5 5 5 5 15188212 0 0 818 1632.0 23824 55.31332 4 0 0 0 0 0 0 14681229 0 0 793 1579.0 23971 55.65462 6 11 11 11 11 11 11 12569247 0 0 661 1301.0 23649 54.90701 8 0 0 0 0 0 0 15417872 0 0 824 1626.5 23469 54.48910 2 3 3 3 3 3 3 14920843 0 0 812 1617.0 23813 55.28778 9 0 0 0 0 0 0 14310464 0 0 808 1580.0 23343 54.19656 5 1 1 1 1 1 1 15712110 0 0 828 1648.0 23228 53.92956 12 882 882 882 882 882 882 13250203 0 0 749 1487.5 23863 55.40387 7 33 33 33 33 33 33 15438596 0 0 819 1631.0 23545 54.66555 col.sampletype &lt;- c(WT = &quot;#9E0142&quot;, EV = &quot;#D0384D&quot;, EH = &quot;#EE6445&quot;, H = &quot;#FA9C58&quot;) expDesign &lt;- condition expDesign$color &lt;- col.sampletype[as.vector(expDesign$condition)] 0.3.3 Histograms of counts per gene 0.3.3.1 matrix plot.new() hist(as.matrix(count.table), col = &quot;blue&quot;, border = &quot;white&quot;, breaks = 100) invisible(dev.off()) 0.3.3.2 truncated matrix plot.new() hist(as.matrix(count.table), col = &quot;blue&quot;, border = &quot;white&quot;, breaks = 20000, xlim = c(0, 500), main = &quot;Counts per gene&quot;, xlab = &quot;Counts (truncated axis)&quot;, ylab = &quot;Number of genes&quot;, las = 1, cex.axis = 0.7) invisible(dev.off()) 0.3.3.3 log2-transformation epsilon &lt;- 1 # pseudo-count to avoid problems with log(0) plot.new() hist(as.matrix(log2(count.table + epsilon)), breaks = 100, col = &quot;blue&quot;, border = &quot;white&quot;, main = &quot;Log2-transformed counts per gene&quot;, xlab = &quot;log2(counts+1)&quot;, ylab = &quot;Number of genes&quot;, las = 1, cex.axis = 0.7) invisible(dev.off()) 0.3.3.4 box-plot plot.new() boxplot(log2(count.table + epsilon), col = expDesign$color, pch = &quot;.&quot;, horizontal = TRUE, cex.axis = 0.5, las = 1, ylab = &quot;Samples&quot;, xlab = &quot;log2(Counts +1)&quot;) invisible(dev.off()) 0.3.3.5 density-plots plot.new() plotDensity(log2(count.table + epsilon), lty = 1, col = expDesign$color, lwd = 2) grid() legend(&quot;topright&quot;, legend = names(col.sampletype), col = col.sampletype, lwd = 2) invisible(dev.off()) 0.3.3.6 scatter-plots all points are aligned along the diagonal, with a relatively wider dispersion at the bottom, corresponding to small number fluctuations. comparing across samples types there are points discarding from the diagonal. plotFun &lt;- function(x, y) { dns &lt;- densCols(x, y) points(x, y, col = dns, pch = &quot;.&quot;, panel.first = grid()) abline(a = 0, b = 1, col = &quot;brown&quot;) } plot.new() pairs(log2(count.table[, sample(ncol(count.table), 12)] + epsilon), panel = plotFun, lower.panel = NULL) invisible(dev.off()) 0.3.4 Eliminate undetected genes prop.null &lt;- apply(count.table, 2, function(x) 100 * mean(x == 0)) plot.new() barplot(prop.null, main = &quot;Percentage of null counts per sample&quot;, horiz = TRUE, cex.names = 0.5, las = 1, col = expDesign$color, ylab = &quot;Samples&quot;, xlab = &quot;% of null counts&quot;) invisible(dev.off()) count.table &lt;- count.table[rowSums(count.table) &gt; 0, ] 0.3.5 Re-run DESeq2 &amp; Normalization dds0 &lt;- DESeqDataSetFromMatrix(countData = count.table, colData = expDesign, design = ~condition + experiment) dds.norm &lt;- estimateSizeFactors(dds0) # sizeFactors(dds.norm) 0.3.5.1 Plot normalized data 0.3.5.1.1 box-plot par(mfrow = c(1, 2), cex.lab = 0.7) boxplot(log2(counts(dds.norm) + epsilon), col = col.sampletype, cex.axis = 0.7, las = 1, xlab = &quot;log2(counts)&quot;, horizontal = TRUE, main = &quot;Raw counts&quot;) boxplot(log2(counts(dds.norm, normalized = TRUE) + epsilon), col = col.sampletype, cex.axis = 0.7, las = 1, xlab = &quot;log2(normalized counts)&quot;, horizontal = TRUE, main = &quot;Normalized counts&quot;) invisible(dev.off()) 0.3.5.1.2 density-plot par(mfrow = c(1, 2), cex.lab = 0.7) plotDensity(log2(counts(dds.norm) + epsilon), col = col.sampletype, xlab = &quot;log2(counts)&quot;, cex.lab = 0.7) plotDensity(log2(counts(dds.norm, normalized = TRUE) + epsilon), col = col.sampletype, xlab = &quot;log2(normalized counts)&quot;, cex.lab = 0.7) invisible(dev.off()) 0.3.6 Count variance is related to mean ## Computing mean and variance norm.counts &lt;- counts(dds.norm, normalized = TRUE) mean.counts &lt;- rowMeans(norm.counts) variance.counts &lt;- apply(norm.counts, 1, var) ## sum(mean.counts==0) # Number ## of completely undetected ## genes norm.counts.stats &lt;- data.frame(min = apply(norm.counts, 2, min), mean = apply(norm.counts, 2, mean), median = apply(norm.counts, 2, median), max = apply(norm.counts, 2, max), zeros = apply(norm.counts == 0, 2, sum), percent.zeros = 100 * apply(norm.counts == 0, 2, sum)/nrow(norm.counts), perc05 = apply(norm.counts, 2, quantile, 0.05), perc10 = apply(norm.counts, 2, quantile, 0.1), perc90 = apply(norm.counts, 2, quantile, 0.9), perc95 = apply(norm.counts, 2, quantile, 0.95)) kable(norm.counts.stats, caption = &quot;**Table: statistics for count. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) (#tab:code block 16)Table: statistics for count. min mean median max zeros percent.zeros perc05 perc10 perc90 perc95 S01 0 563.8231 11.46740 302252.5 6643 25.80106 0 0 1365.663 2374.794 S02 0 559.4646 11.58476 302174.0 6489 25.20294 0 0 1339.392 2330.178 S03 0 570.9703 11.61488 321093.4 6500 25.24566 0 0 1355.457 2351.433 S04 0 571.9695 11.03392 350959.9 6647 25.81660 0 0 1367.203 2347.918 S05 0 563.0195 12.91646 374931.7 5904 22.93083 0 0 1302.164 2257.336 S06 0 560.1683 13.76947 383893.9 6325 24.56597 0 0 1289.740 2226.867 S07 0 570.1387 13.31151 380605.6 6221 24.16204 0 0 1311.945 2298.233 S08 0 576.0588 12.50583 365956.1 6145 23.86686 0 0 1336.584 2334.453 S09 0 534.5886 13.46544 261061.3 6019 23.37748 0 0 1314.227 2242.669 S10 0 551.5089 12.22801 265576.0 6403 24.86892 0 0 1341.005 2321.997 S11 0 548.5404 11.88076 230210.7 6141 23.85132 0 0 1367.567 2335.665 S12 0 559.3352 11.95553 264079.3 6539 25.39713 0 0 1390.102 2375.673 ## Mean and variance ## relationship mean.var.col &lt;- densCols(x = log2(mean.counts), y = log2(variance.counts)) plot.new() plot(x = log2(mean.counts), y = log2(variance.counts), pch = 16, cex = 0.5, col = mean.var.col, main = &quot;Mean-variance relationship&quot;, xlab = &quot;Mean log2(normalized counts) per gene&quot;, ylab = &quot;Variance of log2(normalized counts)&quot;, panel.first = grid()) abline(a = 0, b = 1, col = &quot;brown&quot;) invisible(dev.off()) 0.3.7 Estimated Dispersion for each gene Shows the mean of normalized counts (x axis) and dispersion estimate for each genes ## Performing estimation of ## dispersion parameter dds.disp &lt;- estimateDispersions(dds.norm) plotDispEsts(dds.disp) invisible(dev.off()) 0.3.8 PCA and heatmap on all samples using reguralized log transformation Transforms the count data to the log2 scale in a way which minimizes differences between samples for rows with small counts, and which normalizes with respect to library size. 0.3.8.1 PCA using rlog rld &lt;- rlog(dds.disp, blind = TRUE) hmcol &lt;- colorRampPalette(brewer.pal(11, &quot;Spectral&quot;))(12) plotPCA(rld, ntop = 5000, intgroup = c(&quot;condition&quot;, &quot;experiment&quot;)) + scale_color_manual(values = hmcol) invisible(dev.off()) 0.3.8.2 Heatmap of count matrix for first 50 genes select &lt;- order(rowMedians(counts(dds.disp, normalized = TRUE)), decreasing = TRUE)[1:50] df &lt;- as.data.frame(colData(dds.disp)[, c(&quot;condition&quot;, &quot;experiment&quot;)]) # Heatmap of count matrix pheatmap(assay(rld)[select, ], cluster_rows = TRUE, show_rownames = TRUE, cluster_cols = TRUE, annotation_col = df) invisible(dev.off()) 0.3.8.3 Heatmap of sample distance based on rlog sampleDists &lt;- dist(t(assay(rld))) sampleDistMatrix &lt;- as.matrix(sampleDists) rownames(sampleDistMatrix) &lt;- paste(rld$condition, rld$experiment, sep = &quot;-&quot;) colnames(sampleDistMatrix) &lt;- NULL colors &lt;- colorRampPalette(rev(brewer.pal(9, &quot;Blues&quot;)))(255) pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors) invisible(dev.off()) 0.3.9 Perform differential expression call 0.3.9.1 Set standard cutoff and Enhanced Volcano Plots p_cutoff = 0.1 fc_cutoff = 0.5 xlim &lt;- c(1, 1e+05) ylim &lt;- c(-6, 6) wald.test &lt;- nbinomWaldTest(dds.disp) enhanced_volcano_plots &lt;- function(title, results, pvalue, foldchange) { p = EnhancedVolcano(results, lab = rownames(results), x = &quot;log2FoldChange&quot;, y = &quot;padj&quot;, xlab = bquote(~Log[2] ~ &quot;fold change&quot;), ylab = bquote(~-Log[10] ~ adjusted ~ italic(P)), pCutoff = pvalue, FCcutoff = foldchange, xlim = c(-6, 6), transcriptLabSize = 3, title = title, colAlpha = 1, legend = c(&quot;NS&quot;, &quot;Log2 FC&quot;, &quot;Adjusted p-value&quot;, &quot;Adjusted p-value &amp; Log2 FC&quot;), legendPosition = &quot;bottom&quot;, legendLabSize = 10, legendIconSize = 3, DrawConnectors = TRUE, widthConnectors = 0.5, colConnectors = &quot;black&quot;) return(p) } plotCounts_gg &lt;- function(i, dds, intgroup) { group &lt;- if (length(intgroup) == 1) { colData(dds)[[intgroup]] } else if (length(intgroup) == 2) { lvls &lt;- as.vector(t(outer(levels(colData(dds)[[intgroup[1]]]), levels(colData(dds)[[intgroup[2]]]), function(x, y) paste(x, y, sep = &quot; : &quot;)))) droplevels(factor(apply(as.data.frame(colData(dds)[, intgroup, drop = FALSE]), 1, paste, collapse = &quot; : &quot;), levels = lvls)) } else { factor(apply(as.data.frame(colData(dds)[, intgroup, drop = FALSE]), 1, paste, collapse = &quot; : &quot;)) } data &lt;- plotCounts(dds, gene = i, intgroup = intgroup, returnData = TRUE) data &lt;- cbind(data, data.frame(group = group)) main &lt;- rownames(dds)[i] ggplot(data, aes(x = group, y = count)) + geom_boxplot() + ylab(&quot;Normalized count&quot;) + ggtitle(main) + coord_trans(y = &quot;log2&quot;) + scale_x_discrete(limits = c(&quot;WT&quot;, &quot;EV&quot;, &quot;EH&quot;, &quot;H&quot;)) } # for Kable rowlim = 10 0.3.9.2 Untreated (WT) vs EPO with Vehicle (EV) 0.3.9.2.1 Plots 0.3.9.2.1.1 MA-plot res_WT_EV &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;EV&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_WT_EV_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;EV&quot;), res = res_WT_EV, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_WT_EV, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_WT_EV_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.2.1.2 Historgram of adjusted p-values hist(res_WT_EV$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.2.1.3 Volacano-plot resOrdered_WT_EV &lt;- res_WT_EV[order(res_WT_EV$padj), ] write.csv(as.data.frame(resOrdered_WT_EV), file = &quot;condition_WT_EV_alpha0.1_results.csv&quot;) WT_EV_p1 &lt;- enhanced_volcano_plots(&quot;WT vs. EV (padj=0.05,log2fc=0.5)&quot;, res_WT_EV, 0.05, fc_cutoff) WT_EV_p2 &lt;- enhanced_volcano_plots(&quot;WT vs. EV (padj=0.1,log2fc=0.5)&quot;, res_WT_EV, p_cutoff, fc_cutoff) grid.arrange(WT_EV_p1, WT_EV_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.2.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_WT_EV$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.2.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_WT_EV)[res_WT_EV$padj &lt;= p_cutoff &amp; !is.na(res_WT_EV$padj) &amp; ( res_WT_EV$log2FoldChange &lt;= -0.5 | res_WT_EV$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.2.3 Do functional enrichment res_WT_EV.df &lt;- na.omit(data.frame(res_WT_EV)) induced.sign &lt;- rownames(res_WT_EV.df)[res_WT_EV.df$log2FoldChange &gt;= 0.5 &amp; res_WT_EV.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] na.omit(term.induced) # term.induced$p.value if (nrow(term.induced) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.induced) } kable(term.induced[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis wit gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } ## No genes found that have induced expression repressed.sign &lt;- rownames(res_WT_EV.df)[res_WT_EV.df$log2FoldChange &lt;= -0.5 &amp; res_WT_EV.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] na.omit(term.repressed) if (nrow(term.repressed) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.repressed) } kable(term.repressed[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } (#tab:code block 27)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 13 Jak-STAT signaling pathway 162 22 8 0.049 0.364 7.00e-07 IL4R,OSM,CISH,SOCS2,CDKN1A,MYC,PIM1,SOCS3 18 Signaling by Interleukins 463 21 10 0.022 0.476 1.60e-06 IL4R,OSM,CISH,SOCS2,CD80,CDKN1A,MYC,PIM1,SOCS3,IRS2 16 Cytokine Signaling in Immune system 685 21 11 0.016 0.524 4.60e-06 IL4R,OSM,CISH,EGR1,SOCS2,CD80,CDKN1A,MYC,PIM1,SOCS3,IRS2 19 Interleukin-4 and 13 signaling 111 21 6 0.054 0.286 1.68e-05 IL4R,OSM,CDKN1A,MYC,PIM1,SOCS3 17 Growth hormone receptor signaling 24 21 4 0.167 0.190 3.57e-05 CISH,SOCS2,SOCS3,IRS2 11 response to insulin 255 37 7 0.027 0.189 1.06e-03 CISH,EGR1,SOCS2,MYC,SOCS3,IRS2,PPARA 15 Immune System 2010 21 13 0.006 0.619 5.50e-03 IL4R,OSM,CISH,EGR1,SOCS2,CD80,CDKN1A,MYC,PIM1,MB21D1,HSPA6,SOCS3,IRS2 1 response to oxygen-containing compound 1555 37 13 0.008 0.351 7.17e-03 CPEB4,CISH,KLF9,EGR1,SOCS2,CDKN1A,MYC,PIM1,AQP3,RARG,SOCS3,IRS2,PPARA 14 TFAP2 (AP-2) family regulates transcription of cell cycle factors 5 21 2 0.400 0.095 1.11e-02 CDKN1A,MYC 20 Interleukin-7 signaling 36 21 3 0.083 0.143 1.38e-02 CISH,SOCS2,IRS2 # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.3 Untreated (WT) vs EPO with HMGB1 (EH) 0.3.9.3.1 Plots 0.3.9.3.1.1 MA-plot res_WT_EH &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;EH&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_WT_EH_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;EH&quot;), res = res_WT_EV, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_WT_EH, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_WT_EH_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.3.1.2 Historgram of adjusted p-values hist(res_WT_EH$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.3.1.3 Volacano-plot resOrdered_WT_EH &lt;- res_WT_EH[order(res_WT_EH$padj), ] write.csv(as.data.frame(resOrdered_WT_EH), file = &quot;condition_WT_EH_alpha0.1_results.csv&quot;) WT_EH_p1 &lt;- enhanced_volcano_plots(&quot;WT vs. EH (padj=0.05,log2fc=0.5)&quot;, res_WT_EH, 0.05, fc_cutoff) WT_EH_p2 &lt;- enhanced_volcano_plots(&quot;WT vs. EH (padj=0.1,log2fc=0.5)&quot;, res_WT_EH, p_cutoff, fc_cutoff) grid.arrange(WT_EH_p1, WT_EH_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.3.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_WT_EH$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.3.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_WT_EH)[res_WT_EH$padj &lt;= p_cutoff &amp; !is.na(res_WT_EH$padj) &amp; ( res_WT_EH$log2FoldChange &lt;= -0.5 | res_WT_EH$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.3.3 Do functional enrichment res_WT_EH.df &lt;- na.omit(data.frame(res_WT_EH)) induced.sign &lt;- rownames(res_WT_EV.df)[res_WT_EH.df$log2FoldChange &gt;= 0.5 &amp; res_WT_EH.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value na.omit(term.induced) if (nrow(term.induced) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.induced) } kable(term.induced[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis wit gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } (#tab:code block 33)Table: induced gene functional analysis wit gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 2 Sulfide oxidation to sulfate 6 17 2 0.333 0.118 0.00963 TST,SLC25A10 1 Degradation of cysteine and homocysteine 13 17 2 0.154 0.118 0.04970 TST,SLC25A10 repressed.sign &lt;- rownames(res_WT_EH.df)[res_WT_EH.df$log2FoldChange &lt;= -0.5 &amp; res_WT_EH.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] na.omit(term.repressed) if (nrow(term.repressed) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.repressed) } kable(term.repressed[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } (#tab:code block 33)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 25 Cytokine Signaling in Immune system 685 21 10 0.015 0.476 6.82e-05 ICAM1,NFKBIA,RELB,CISH,EGR1,SOCS2,IRF1,MYC,PIM1,JUN 24 Immune System 2010 21 15 0.007 0.714 7.65e-05 ICAM1,NFKBIA,RELB,CISH,TNFAIP3,EGR1,SOCS2,IRF1,MYC,PIM1,NFKBIE,MB21D1,SLCO4C1,JUN,UBOX5 20 Epstein-Barr virus infection 197 23 7 0.036 0.304 8.57e-05 ICAM1,NFKBIA,RELB,TNFAIP3,MYC,NFKBIE,JUN 22 HTLV-I infection 253 23 7 0.028 0.304 4.54e-04 ICAM1,NFKBIA,RELB,EGR1,MYC,ETS2,JUN 27 Factor: E2F; motif: GGCGSG; match class: 1 10205 36 33 0.003 0.917 5.29e-04 MSMO1,VMP1,KLF6,ICAM1,NFKBIA,RELB,ARRDC3,CISH,TNFAIP3,EGR1,SOCS2,ARL4A,IRF1,A4GALT,TMEM160,NINJ1,BHLHE40,MYC,PIM1,NFKBIZ,NFKBIE,RAB11FIP1,ETS2,ANKRD33B,MB21D1,KCNK5,STARD5,SLCO4C1,JUN,DDN,H1FX,UBOX5,TSC22D2 16 TNF-alpha/NF-kappa B signaling complex (CHUK, KPNA3, NFKB2, NFKBIB, REL, IKBKG, NFKB1, NFKBIE, RELB, NFKBIA, RELA, TNIP2) 12 10 3 0.250 0.300 9.73e-04 NFKBIA,RELB,NFKBIE 15 transcription factor activity, RNA polymerase II proximal promoter sequence-specific DNA binding 399 36 8 0.020 0.222 1.32e-03 KLF6,EGR1,IRF1,BHLHE40,MYC,ETS2,JUN,DDN 12 RNA polymerase II regulatory region sequence-specific DNA binding 634 36 9 0.014 0.250 4.17e-03 KLF6,RELB,EGR1,IRF1,BHLHE40,MYC,ETS2,JUN,DDN 9 RNA polymerase II regulatory region DNA binding 635 36 9 0.014 0.250 4.23e-03 KLF6,RELB,EGR1,IRF1,BHLHE40,MYC,ETS2,JUN,DDN 6 double-stranded DNA binding 832 36 10 0.012 0.278 4.47e-03 KLF6,RELB,EGR1,IRF1,BHLHE40,MYC,ETS2,MB21D1,JUN,DDN # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.4 Untreated (WT) vs HMGB1 (H) 0.3.9.4.1 Plots 0.3.9.4.1.1 MA-plot res_WT_H &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;H&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_WT_H_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;WT&quot;, &quot;H&quot;), res = res_WT_H, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_WT_H, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_WT_H_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.4.1.2 Historgram of adjusted p-values hist(res_WT_H$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.4.1.3 Volacano-plot resOrdered_WT_H &lt;- res_WT_H[order(res_WT_H$padj), ] write.csv(as.data.frame(resOrdered_WT_H), file = &quot;condition_WT_H_alpha0.1_results.csv&quot;) WT_H_p1 &lt;- enhanced_volcano_plots(&quot;WT vs. H (padj=0.05,log2fc=0.5)&quot;, res_WT_H, 0.05, fc_cutoff) WT_H_p2 &lt;- enhanced_volcano_plots(&quot;WT vs. H (padj=0.1,log2fc=0.5)&quot;, res_WT_H, p_cutoff, fc_cutoff) grid.arrange(WT_H_p1, WT_H_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.4.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_WT_H$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.4.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_WT_H)[res_WT_H$padj &lt;= p_cutoff &amp; !is.na(res_WT_H$padj) &amp; ( res_WT_H$log2FoldChange &lt;= -0.5 | res_WT_H$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.4.3 Do functional enrichment res_WT_H.df &lt;- na.omit(data.frame(res_WT_H)) induced.sign &lt;- rownames(res_WT_H.df)[res_WT_H.df$log2FoldChange &gt;= 0.5 &amp; res_WT_H.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] na.omit(term.induced) if (nrow(term.induced) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.induced) } # term.induced$p.value if (length(term.induced$term.name) == 0) { cat(&quot;No terms found that have induced expression using the genelist&quot;) } else { kable(term.induced[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } } ## No terms found that have induced expression using the genelist repressed.sign &lt;- rownames(res_WT_H.df)[res_WT_H.df$log2FoldChange &lt;= -0.5 &amp; res_WT_H.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] na.omit(term.repressed) if (nrow(term.repressed) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.repressed) } kable(term.repressed[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } (#tab:code block 39)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 12 Epstein-Barr virus infection 197 12 5 0.025 0.417 0.000472 ICAM1,NFKBIA,TNFAIP3,NFKBIE,JUN 14 TNF signaling pathway 108 12 4 0.037 0.333 0.001050 ICAM1,NFKBIA,TNFAIP3,JUN 4 CHUK-NFKB2-REL-IKBKG-SPAG9-NFKB1-NFKBIE-COPB2-TNIP1-NFKBIA-RELA-TNIP2 complex 12 4 2 0.167 0.500 0.003060 NFKBIA,NFKBIE 6 TNF-alpha/NF-kappa B signaling complex (CHUK, KPNA3, NFKB2, NFKBIB, REL, IKBKG, NFKB1, NFKBIE, RELB, NFKBIA, RELA, TNIP2) 12 4 2 0.167 0.500 0.003060 NFKBIA,NFKBIE 1 regulation of DNA binding transcription factor activity 400 20 6 0.015 0.300 0.005180 ICAM1,NFKBIA,TNFAIP3,BHLHE40,NFKBIE,JUN 9 B cell receptor signaling pathway 70 12 3 0.043 0.250 0.008990 NFKBIA,NFKBIE,JUN 3 nucleotide-binding oligomerization domain containing 1 signaling pathway 4 20 2 0.500 0.100 0.013800 NFKBIA,TNFAIP3 13 Th1 and Th2 cell differentiation 90 12 3 0.033 0.250 0.018900 NFKBIA,NFKBIE,JUN 7 IL-17 signaling pathway 92 12 3 0.033 0.250 0.020200 NFKBIA,TNFAIP3,JUN 8 NF-kappa B signaling pathway 93 12 3 0.032 0.250 0.020900 ICAM1,NFKBIA,TNFAIP3 # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.5 EPO with Vehicle (EV) vs EPO with HMGB1 (EH) 0.3.9.5.1 Plots 0.3.9.5.1.1 MA-plot res_EV_EH &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;EV&quot;, &quot;EH&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_EV_EH_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;EV&quot;, &quot;EH&quot;), res = res_EV_EH, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_EV_EH, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_EV_EH_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.5.1.2 Historgram of adjusted p-values hist(res_EV_EH$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.5.1.3 Volacano-plot resOrdered_EV_EH &lt;- res_EV_EH[order(res_EV_EH$padj), ] write.csv(as.data.frame(resOrdered_EV_EH), file = &quot;condition_EV_EH_alpha0.1_results.csv&quot;) EV_EH_p1 &lt;- enhanced_volcano_plots(&quot;EV vs. EH (padj=0.05,log2fc=0.5)&quot;, res_EV_EH, 0.05, fc_cutoff) EV_EH_p2 &lt;- enhanced_volcano_plots(&quot;EV vs. EH (padj=0.1,log2fc=0.5)&quot;, res_EV_EH, p_cutoff, fc_cutoff) grid.arrange(EV_EH_p1, EV_EH_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.5.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_EV_EH$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.5.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_EV_EH)[res_EV_EH$padj &lt;= p_cutoff &amp; !is.na(res_EV_EH$padj) &amp; ( res_EV_EH$log2FoldChange &lt;= -0.5 | res_EV_EH$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.5.3 Do functional enrichment res_EV_EH.df &lt;- na.omit(data.frame(res_EV_EH)) induced.sign &lt;- rownames(res_EV_EH.df)[res_EV_EH.df$log2FoldChange &gt;= 0.5 &amp; res_EV_EH.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] na.omit(term.induced) if (nrow(term.induced) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.induced) } # term.induced$p.value kable(term.induced[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } (#tab:code block 45)Table: induced gene functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 2 positive regulation of tau-protein kinase activity 4 23 2 0.500 0.087 0.0193 EGR1,NAB2 3 Attenuation phase 14 13 2 0.143 0.154 0.0334 HSPA2,HSPA1A 1 regulation of tau-protein kinase activity 6 23 2 0.333 0.087 0.0481 EGR1,NAB2 repressed.sign &lt;- rownames(res_EV_EH.df)[res_EV_EH.df$log2FoldChange &lt;= -0.5 &amp; res_EV_EH.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] na.omit(term.repressed) if (nrow(term.repressed) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.repressed) } kable(term.repressed[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;), full_width = FALSE) } (#tab:code block 45)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 28 TNF signaling pathway 108 15 7 0.065 0.467 0.00e+00 BIRC3,TRAF1,BCL3,ICAM1,NFKBIA,TNFAIP3,JUN 33 NF-kappa B signaling pathway 93 15 6 0.065 0.400 9.00e-07 BIRC3,TRAF1,ICAM1,NFKBIA,RELB,TNFAIP3 30 Epstein-Barr virus infection 197 15 7 0.036 0.467 2.70e-06 TRAF1,ICAM1,NFKBIA,RELB,TNFAIP3,NFKBIE,JUN 21 I-kappaB/NF-kappaB complex 7 20 3 0.429 0.150 7.49e-05 BCL3,NFKBIA,RELB 1 regulation of DNA binding transcription factor activity 400 20 7 0.018 0.350 2.14e-04 TRAF1,ICAM1,NFKBIA,TNFAIP3,BHLHE40,NFKBIE,JUN 22 TNF-alpha/NF-kappa B signaling complex (CHUK, KPNA3, NFKB2, NFKBIB, REL, IKBKG, NFKB1, NFKBIE, RELB, NFKBIA, RELA, TNIP2) 12 8 3 0.250 0.375 3.12e-04 NFKBIA,RELB,NFKBIE 39 TNFR1-induced NFkappaB signaling pathway 26 12 3 0.115 0.250 7.68e-04 BIRC3,TRAF1,TNFAIP3 18 cellular response to tumor necrosis factor 290 20 6 0.021 0.300 7.94e-04 BIRC3,TNFRSF9,TRAF1,ICAM1,NFKBIA,TNFAIP3 17 response to tumor necrosis factor 307 20 6 0.020 0.300 1.11e-03 BIRC3,TNFRSF9,TRAF1,ICAM1,NFKBIA,TNFAIP3 40 Regulation of TNFR1 signaling 33 12 3 0.091 0.250 1.61e-03 BIRC3,TRAF1,TNFAIP3 # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.6 EPO with Vehicle (EV) vs HMGB1 (H) 0.3.9.6.1 Plots 0.3.9.6.1.1 MA-plot res_EV_H &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;EV&quot;, &quot;H&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_EV_H_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;EV&quot;, &quot;H&quot;), res = res_EV_H, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_EV_H, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_EV_H_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.6.1.2 Historgram of adjusted p-values hist(res_EV_H$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.6.1.3 Volacano-plot resOrdered_EV_H &lt;- res_EV_H[order(res_EV_H$padj), ] write.csv(as.data.frame(resOrdered_EV_H), file = &quot;condition_EV_H_alpha0.1_results.csv&quot;) EV_H_p1 &lt;- enhanced_volcano_plots(&quot;EV vs. H (padj=0.05,log2fc=0.5)&quot;, res_EV_H, 0.05, fc_cutoff) EV_H_p2 &lt;- enhanced_volcano_plots(&quot;EV vs. H (padj=0.1,log2fc=0.5)&quot;, res_EV_H, p_cutoff, fc_cutoff) grid.arrange(EV_H_p1, EV_H_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.6.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_EV_H$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.6.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_EV_H)[res_EV_H$padj &lt;= p_cutoff &amp; !is.na(res_EV_H$padj) &amp; ( res_EV_H$log2FoldChange &lt;= -0.5 | res_EV_H$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.6.3 Do functional enrichment res_EV_H.df &lt;- na.omit(data.frame(res_EV_H)) induced.sign &lt;- rownames(res_EV_H.df)[res_EV_H.df$log2FoldChange &gt;= 0.5 &amp; res_EV_H.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value na.omit(term.induced) if (nrow(term.induced) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.induced) } kable(term.induced[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } (#tab:code block 51)Table: induced gene functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 33 Growth hormone receptor signaling 24 34 5 0.208 0.147 3.30e-06 CISH,SOCS2,SOCS3,SOCS1,IRS2 32 Cytokine Signaling in Immune system 685 34 12 0.018 0.353 2.39e-04 OSM,CISH,EGR1,SOCS2,CD80,CDKN1A,PIM1,EIF4A1,FOS,SOCS3,SOCS1,IRS2 34 Signaling by Interleukins 463 34 10 0.022 0.294 3.92e-04 OSM,CISH,SOCS2,CD80,CDKN1A,PIM1,FOS,SOCS3,SOCS1,IRS2 36 Interleukin-4 and 13 signaling 111 34 6 0.054 0.176 4.01e-04 OSM,CDKN1A,PIM1,FOS,SOCS3,SOCS1 30 Jak-STAT signaling pathway 162 34 7 0.043 0.206 4.96e-04 OSM,CISH,SOCS2,CDKN1A,PIM1,SOCS3,SOCS1 3 negative regulation of kinase activity 272 66 9 0.033 0.136 1.01e-03 GADD45B,CISH,SOCS2,CDKN1A,DUSP2,SH3BP5L,SOCS3,SOCS1,IRS2 29 Prolactin signaling pathway 70 34 5 0.071 0.147 1.04e-03 CISH,SOCS2,FOS,SOCS3,SOCS1 37 Factor: E2F; motif: GGCGSG; match class: 1 10205 65 53 0.005 0.815 1.05e-03 KLF6,GADD45B,OSM,EIF5,EEF2K,RASD1,CISH,MREG,KLF9,EGR1,SOCS2,ARL4A,IKZF4,CDKN1A,SOX21,ID1,HSPA2,CHAC1,PIM1,ARRDC4,SIK1,RGS16,RHOB,FAM83A,KLF10,RAB11FIP1,DUSP2,EIF4A1,AGGF1,MB21D1,KCNK5,C10ORF10,NAB2,FAM102A,RHEBL1,MAT2A,B3GALNT1,FOS,KLF11,STARD5,HSPA6,SH3BP5L,CDK5R1,SOCS3,OSBP2,SOCS1,IRS2,HPDL,TSC22D2,ZNF470,NRARP,CCDC71L,PIGW 35 Interleukin-7 signaling 36 34 4 0.111 0.118 1.57e-03 CISH,SOCS2,SOCS1,IRS2 2 negative regulation of transferase activity 298 66 9 0.030 0.136 2.18e-03 GADD45B,CISH,SOCS2,CDKN1A,DUSP2,SH3BP5L,SOCS3,SOCS1,IRS2 repressed.sign &lt;- rownames(res_EV_H.df)[res_EV_H.df$log2FoldChange &lt;= -0.5 &amp; res_EV_H.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] na.omit(term.repressed) if (nrow(term.repressed) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.repressed) } kable(term.repressed[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } (#tab:code block 51)Table: repressed genes functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 14 TNF signaling pathway 108 17 7 0.065 0.412 1.00e-07 BIRC3,TRAF1,BCL3,ICAM1,NFKBIA,TNFAIP3,JUN 13 NF-kappa B signaling pathway 93 17 5 0.054 0.294 9.21e-05 BIRC3,TRAF1,ICAM1,NFKBIA,TNFAIP3 3 cellular response to tumor necrosis factor 290 24 7 0.024 0.292 9.55e-05 BIRC3,TNFRSF9,TRAF1,ICAM1,NFKBIA,TNFAIP3,ZFP36L2 2 response to tumor necrosis factor 307 24 7 0.023 0.292 1.41e-04 BIRC3,TNFRSF9,TRAF1,ICAM1,NFKBIA,TNFAIP3,ZFP36L2 6 liver development 139 24 5 0.036 0.208 1.47e-03 NFKBIA,TNFAIP3,SLCO2B1,CITED2,JUN 21 TNFR1-induced NFkappaB signaling pathway 26 15 3 0.115 0.200 1.53e-03 BIRC3,TRAF1,TNFAIP3 5 hepaticobiliary system development 142 24 5 0.035 0.208 1.64e-03 NFKBIA,TNFAIP3,SLCO2B1,CITED2,JUN 20 Regulation of TNFR1 signaling 33 15 3 0.091 0.200 3.20e-03 BIRC3,TRAF1,TNFAIP3 16 Epstein-Barr virus infection 197 17 5 0.025 0.294 3.60e-03 TRAF1,ICAM1,NFKBIA,TNFAIP3,JUN 4 tumor necrosis factor-mediated signaling pathway 174 24 5 0.029 0.208 4.46e-03 BIRC3,TNFRSF9,TRAF1,NFKBIA,TNFAIP3 # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) 0.3.9.7 EPO with HMGB1 (EH) vs HMGB1 (H) 0.3.9.7.1 Plots 0.3.9.7.1.1 MA-plot res_EH_H &lt;- results(wald.test, contrast = c(&quot;condition&quot;, &quot;EH&quot;, &quot;H&quot;), alpha = p_cutoff, pAdjustMethod = &quot;BH&quot;) res_EH_H_ashr &lt;- lfcShrink(wald.test, contrast = c(&quot;condition&quot;, &quot;EH&quot;, &quot;H&quot;), res = res_EH_H, type = &quot;ashr&quot;) par(mfrow = c(1, 2)) plotMA(res_EH_H, xlim = xlim, ylim = ylim, main = &quot;normal&quot;) plotMA(res_EH_H_ashr, xlim = xlim, ylim = ylim, main = &quot;ashr&quot;) invisible(dev.off()) 0.3.9.7.1.2 Historgram of adjusted p-values hist(res_EH_H$padj, breaks = 20, col = &quot;grey&quot;, main = &quot;DESeq2 p-value distribution&quot;, xlab = &quot;DESeq2 P-value&quot;, ylab = &quot;Number of genes&quot;) 0.3.9.7.1.3 Volacano-plot resOrdered_EH_H &lt;- res_EH_H[order(res_EH_H$padj), ] write.csv(as.data.frame(resOrdered_EH_H), file = &quot;condition_EH_H_alpha0.1_results.csv&quot;) EH_H_p1 &lt;- enhanced_volcano_plots(&quot;EH vs. H (padj=0.05,log2fc=0.5)&quot;, res_EH_H, 0.05, fc_cutoff) EH_H_p2 &lt;- enhanced_volcano_plots(&quot;EH vs. H (padj=0.1,log2fc=0.5)&quot;, res_EH_H, p_cutoff, fc_cutoff) grid.arrange(EH_H_p1, EH_H_p2, nrow = 2, ncol = 1) grid.rect(gp = gpar(fill = NA)) invisible(dev.off()) 0.3.9.7.1.4 Plot counts nBestFeatures = 20 ord &lt;- order(res_EH_H$padj, decreasing = FALSE) for (i in head(ord, nBestFeatures)) { print(plotCounts_gg(i, dds = wald.test, intgroup = c(&quot;condition&quot;))) } 0.3.9.7.2 Select genes based on FDR and make heatmap gene.kept &lt;- rownames(res_EH_H)[res_EH_H$padj &lt;= p_cutoff &amp; !is.na(res_EH_H$padj) &amp; ( res_EH_H$log2FoldChange &lt;= -0.5 | res_EH_H$log2FoldChange &gt;= 0.5)] count.table.kept &lt;- log2(count.table + epsilon)[gene.kept, ] heatmap.2(as.matrix(count.table.kept), scale=&quot;row&quot;, hclust=function(x) hclust(x,method=&quot;average&quot;), distfun=function(x) as.dist((1-cor(t(x)))/2), trace=&quot;none&quot;, density=&quot;none&quot;, #labRow=&quot;&quot;, cexCol=0.7) invisible(dev.off()) 0.3.9.7.3 Do functional enrichment res_EH_H.df &lt;- na.omit(data.frame(res_EH_H)) induced.sign &lt;- rownames(res_EH_H.df)[res_EH_H.df$log2FoldChange &gt;= 0.5 &amp; res_EH_H.df$padj &lt; p_cutoff] # head(induced.sign) # names(term.induced) if (identical(induced.sign, character(0))) { cat(&quot;No genes found that have induced expression&quot;) } else { term.induced &lt;- gprofiler(query = induced.sign, organism = &quot;hsapiens&quot;) term.induced &lt;- term.induced[order(term.induced$p.value), ] # term.induced$p.value na.omit(term.induced) if (nrow(term.induced) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.induced) } kable(term.induced[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: induced gene functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } (#tab:code block 57)Table: induced gene functional analysis with gProfileR. term.name term.size query.size overlap.size recall precision p.value intersection 3 Jak-STAT signaling pathway 162 6 4 0.025 0.667 0.000146 OSM,CISH,SOCS2,PIM1 4 Cytokine Signaling in Immune system 685 7 5 0.007 0.714 0.004300 OSM,CISH,EGR1,SOCS2,PIM1 7 Growth hormone receptor signaling 24 7 2 0.083 0.286 0.020700 CISH,SOCS2 5 Signaling by Interleukins 463 7 4 0.009 0.571 0.023100 OSM,CISH,SOCS2,PIM1 6 Interleukin-7 signaling 36 7 2 0.056 0.286 0.047100 CISH,SOCS2 1 RCP-Rab11 complex 2 2 1 0.500 0.500 0.049800 RAB11FIP1 2 EGR-EP300 complex 2 2 1 0.500 0.500 0.049800 EGR1 repressed.sign &lt;- rownames(res_EH_H.df)[res_EH_H.df$log2FoldChange &lt;= -0.5 &amp; res_EH_H.df$padj &lt; p_cutoff] if (identical(repressed.sign, character(0))) { cat(&quot;No genes found that have repressed expression&quot;) } else { term.repressed &lt;- gprofiler(query = repressed.sign, organism = &quot;hsapiens&quot;) term.repressed &lt;- term.repressed[order(term.repressed$p.value), ] na.omit(term.repressed) if (nrow(term.repressed) &gt;= 10) { rowlim = 10 } else { rowlim = nrow(term.repressed) } kable(term.repressed[1:rowlim, c(&quot;term.name&quot;, &quot;term.size&quot;, &quot;query.size&quot;, &quot;overlap.size&quot;, &quot;recall&quot;, &quot;precision&quot;, &quot;p.value&quot;, &quot;intersection&quot;)], format.args = c(engeneer = TRUE, digits = 3), caption = &quot;**Table: repressed genes functional analysis with gProfileR. ** &quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) } ## No genes found that have repressed expression # kable(head(term.induced[,c(&#39;p.value&#39;, # &#39;term.name&#39;,&#39;intersection&#39;)], # 10)) "]
]
